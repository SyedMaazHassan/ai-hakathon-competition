"""
Email Action Service - Simple Django email integration
Plug & play with TriggerOrchestrator EmailAction
"""
import os
import django
from pathlib import Path

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.base')
django.setup()

from django.core.mail import send_mail, send_mass_mail, get_connection
from django.core.mail.backends.base import BaseEmailBackend
from django.conf import settings
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from typing import Dict, List, Any
import logging

logger = logging.getLogger(__name__)

class EmailActionService:
    """
    Simple email service using Django's built-in email functionality
    """

    @staticmethod
    def test_email_config() -> Dict[str, Any]:
        """Test if email is configured properly"""
        try:
            from django.core.mail import get_connection
            connection = get_connection()
            return {
                "success": True,
                "backend": settings.EMAIL_BACKEND,
                "host": getattr(settings, 'EMAIL_HOST', 'Not set'),
                "from_email": settings.DEFAULT_FROM_EMAIL
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    @staticmethod
    def send_emergency_email(email_action) -> Dict[str, Any]:
        """
        Send emergency email from EmailAction object

        Args:
            email_action: EmailAction object from TriggerOrchestrator

        Returns:
            Dict with status and details
        """
        try:
            subject = f"üö® EMERGENCY: {email_action.subject}"

            # Format message with emergency styling
            html_content = f"""
            <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
                <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
                    <h1 style="margin: 0; font-size: 24px;">üö® EMERGENCY ALERT</h1>
                    <p style="margin: 10px 0 0 0; font-size: 16px;">{email_action.title}</p>
                </div>

                <div style="padding: 20px; background-color: #f8f9fa;">
                    <h2 style="color: #dc3545; margin-top: 0;">Subject: {email_action.subject}</h2>

                    <div style="background: white; padding: 20px; border-radius: 5px; margin: 15px 0;">
                        <pre style="white-space: pre-wrap; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;">
{email_action.body}
                        </pre>
                    </div>

                    {self._get_location_section(email_action)}

                    <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                        <p style="margin: 0; color: #6c757d; font-size: 12px;">
                            Priority: {email_action.priority.value} |
                            Estimated Duration: {email_action.estimated_duration} |
                            Generated by Emergency Response System
                        </p>
                    </div>
                </div>
            </div>
            """

            # Plain text version
            location_text = self._get_location_text(email_action)
            plain_message = f"""
üö® EMERGENCY ALERT: {email_action.title}

Subject: {email_action.subject}

{email_action.body}

{location_text}

Priority: {email_action.priority.value}
Estimated Duration: {email_action.estimated_duration}
Generated by Emergency Response System
            """

            # Send email
            result = send_mail(
                subject=subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[email_action.recipient_email],
                html_message=html_content,
                fail_silently=False
            )

            # Handle CC if provided
            if email_action.department_cc:
                send_mail(
                    subject=f"CC: {subject}",
                    message=f"CC Copy:\n\n{plain_message}",
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[email_action.department_cc],
                    fail_silently=True  # Don't fail main email if CC fails
                )

            return {
                "success": True,
                "status": "sent",
                "action_type": email_action.action_type.value,
                "recipient": email_action.recipient_email,
                "subject": subject,
                "message_id": f"email_{hash(email_action.recipient_email)}_{hash(subject)}",
                "estimated_delivery": email_action.estimated_duration
            }

        except Exception as e:
            logger.error(f"Failed to send emergency email: {str(e)}")
            return {
                "success": False,
                "status": "failed",
                "action_type": email_action.action_type.value,
                "recipient": email_action.recipient_email,
                "error": str(e)
            }

    @staticmethod
    def send_standard_email(email_action) -> Dict[str, Any]:
        """
        Send standard email for non-emergency actions
        """
        try:
            # Format message with standard styling
            html_content = f"""
            <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
                <div style="background-color: #007bff; color: white; padding: 15px; text-align: center;">
                    <h1 style="margin: 0; font-size: 20px;">üìß {email_action.title}</h1>
                </div>

                <div style="padding: 20px; background-color: #f8f9fa;">
                    <h2 style="color: #007bff; margin-top: 0;">{email_action.subject}</h2>

                    <div style="background: white; padding: 20px; border-radius: 5px;">
                        <pre style="white-space: pre-wrap; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;">
{email_action.body}
                        </pre>
                    </div>

                    <div style="margin-top: 15px; color: #6c757d; font-size: 12px;">
                        Priority: {email_action.priority.value} |
                        Duration: {email_action.estimated_duration}
                    </div>
                </div>
            </div>
            """

            plain_message = f"""
{email_action.title}

{email_action.body}

Priority: {email_action.priority.value}
Duration: {email_action.estimated_duration}
            """

            result = send_mail(
                subject=email_action.subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[email_action.recipient_email],
                html_message=html_content,
                fail_silently=False
            )

            return {
                "success": True,
                "status": "sent",
                "action_type": email_action.action_type.value,
                "recipient": email_action.recipient_email,
                "subject": email_action.subject,
                "estimated_delivery": email_action.estimated_duration
            }

        except Exception as e:
            logger.error(f"Failed to send standard email: {str(e)}")
            return {
                "success": False,
                "status": "failed",
                "action_type": email_action.action_type.value,
                "recipient": email_action.recipient_email,
                "error": str(e)
            }

    @staticmethod
    def execute_email_action(email_action) -> Dict[str, Any]:
        """
        Main execution method - routes to appropriate email type

        Args:
            email_action: EmailAction from TriggerOrchestrator

        Returns:
            Dict with execution result
        """
        # Determine if it's emergency based on priority
        if email_action.priority.value in ["critical", "high"]:
            return EmailActionService.send_emergency_email(email_action)
        else:
            return EmailActionService.send_standard_email(email_action)

    @staticmethod
    def send_bulk_emails(email_actions: List) -> Dict[str, Any]:
        """
        Send multiple emails efficiently
        """
        results = []
        successful = 0
        failed = 0

        for email_action in email_actions:
            result = EmailActionService.execute_email_action(email_action)
            results.append(result)

            if result["success"]:
                successful += 1
            else:
                failed += 1

        return {
            "success": True,
            "total_sent": successful,
            "total_failed": failed,
            "results": results
        }

    @staticmethod
    def _get_location_section(email_action) -> str:
        """Generate HTML location section with Google Maps link"""
        if not hasattr(email_action, 'user_coordinates') or not email_action.user_coordinates:
            return ""

        lat = email_action.user_coordinates.get('lat') or email_action.user_coordinates.get('latitude')
        lng = email_action.user_coordinates.get('lng') or email_action.user_coordinates.get('longitude')

        if not lat or not lng:
            return ""

        maps_link = f"https://maps.google.com/maps?q={lat},{lng}"

        return f"""
                    <div style="background: #fff3cd; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #ffc107;">
                        <h3 style="color: #856404; margin-top: 0; font-size: 16px;">üìç INCIDENT LOCATION</h3>
                        <p style="margin: 5px 0; color: #856404;">
                            <strong>Coordinates:</strong> {lat}, {lng}
                        </p>
                        <p style="margin: 10px 0;">
                            <a href="{maps_link}"
                               style="background-color: #4285f4; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px; display: inline-block;"
                               target="_blank">
                                üó∫Ô∏è Open in Google Maps
                            </a>
                        </p>
                        <p style="margin: 5px 0; font-size: 12px; color: #6c757d;">
                            Click the link above to navigate to the exact location
                        </p>
                    </div>
        """

    @staticmethod
    def _get_location_text(email_action) -> str:
        """Generate plain text location section with Google Maps link"""
        if not hasattr(email_action, 'user_coordinates') or not email_action.user_coordinates:
            return ""

        lat = email_action.user_coordinates.get('lat') or email_action.user_coordinates.get('latitude')
        lng = email_action.user_coordinates.get('lng') or email_action.user_coordinates.get('longitude')

        if not lat or not lng:
            return ""

        maps_link = f"https://maps.google.com/maps?q={lat},{lng}"

        return f"""üìç INCIDENT LOCATION:
Coordinates: {lat}, {lng}
Google Maps: {maps_link}
"""